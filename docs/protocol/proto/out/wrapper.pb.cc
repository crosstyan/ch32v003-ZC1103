// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrapper.proto

#include "wrapper.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/{}
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
static ::_pb::Metadata file_level_metadata_wrapper_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_wrapper_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_wrapper_2eproto = nullptr;
const ::uint32_t TableStruct_wrapper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::Message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_wrapper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rwrapper.proto\032\021spot_config.proto\032\nspot"
    ".proto\"\200\001\n\007Message\022\020\n\006device\030\001 \001(\014H\000\022\023\n\t"
    "broadcast\030\002 \001(\005H\000\022\035\n\006config\030\003 \001(\0132\013.Spot"
    "ConfigH\001\022\025\n\004spot\030\004 \001(\0132\005.SpotH\001B\r\n\013desti"
    "nationB\t\n\007payloadP\000P\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_wrapper_2eproto_deps[2] =
    {
        &::descriptor_table_spot_2eproto,
        &::descriptor_table_spot_5fconfig_2eproto,
};
static ::absl::once_flag descriptor_table_wrapper_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wrapper_2eproto = {
    false,
    false,
    189,
    descriptor_table_protodef_wrapper_2eproto,
    "wrapper.proto",
    &descriptor_table_wrapper_2eproto_once,
    descriptor_table_wrapper_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_wrapper_2eproto::offsets,
    file_level_metadata_wrapper_2eproto,
    file_level_enum_descriptors_wrapper_2eproto,
    file_level_service_descriptors_wrapper_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wrapper_2eproto_getter() {
  return &descriptor_table_wrapper_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wrapper_2eproto(&descriptor_table_wrapper_2eproto);
// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::Message, _impl_._oneof_case_);
  static const ::SpotConfig& config(const Message* msg);
  static const ::Spot& spot(const Message* msg);
};

const ::SpotConfig&
Message::_Internal::config(const Message* msg) {
  return *msg->_impl_.payload_.config_;
}
const ::Spot&
Message::_Internal::spot(const Message* msg) {
  return *msg->_impl_.payload_.spot_;
}
void Message::set_allocated_config(::SpotConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    _impl_.payload_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.config)
}
void Message::clear_config() {
  if (payload_case() == kConfig) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.config_;
    }
    clear_has_payload();
  }
}
void Message::set_allocated_spot(::Spot* spot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (spot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spot));
    if (message_arena != submessage_arena) {
      spot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot, submessage_arena);
    }
    set_has_spot();
    _impl_.payload_.spot_ = spot;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.spot)
}
void Message::clear_spot() {
  if (payload_case() == kSpot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.spot_;
    }
    clear_has_payload();
  }
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_destination();
  switch (from.destination_case()) {
    case kDevice: {
      _this->_internal_set_device(from._internal_device());
      break;
    }
    case kBroadcast: {
      _this->_internal_set_broadcast(from._internal_broadcast());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kConfig: {
      _this->_internal_mutable_config()->::SpotConfig::MergeFrom(
          from._internal_config());
      break;
    }
    case kSpot: {
      _this->_internal_mutable_spot()->::Spot::MergeFrom(
          from._internal_spot());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_destination();
  clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_destination()) {
    clear_destination();
  }
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_destination() {
// @@protoc_insertion_point(one_of_clear_start:Message)
  switch (destination_case()) {
    case kDevice: {
      _impl_.destination_.device_.Destroy();
      break;
    }
    case kBroadcast: {
      // No need to clear
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DESTINATION_NOT_SET;
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:Message)
  switch (payload_case()) {
    case kConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.config_;
      }
      break;
    }
    case kSpot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.spot_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_destination();
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 broadcast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_broadcast(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .SpotConfig config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .Spot spot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (destination_case()) {
    case kDevice: {
      const std::string& _s = this->_internal_device();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
      break;
    }
    case kBroadcast: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          2, this->_internal_broadcast(), target);
      break;
    }
    default: ;
  }
  switch (payload_case()) {
    case kConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::config(this),
          _Internal::config(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::spot(this),
          _Internal::spot(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (destination_case()) {
    // bytes device = 1;
    case kDevice: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_device());
      break;
    }
    // int32 broadcast = 2;
    case kBroadcast: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_broadcast());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  switch (payload_case()) {
    // .SpotConfig config = 3;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.config_);
      break;
    }
    // .Spot spot = 4;
    case kSpot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.spot_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.destination_case()) {
    case kDevice: {
      _this->_internal_set_device(from._internal_device());
      break;
    }
    case kBroadcast: {
      _this->_internal_set_broadcast(from._internal_broadcast());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  switch (from.payload_case()) {
    case kConfig: {
      _this->_internal_mutable_config()->::SpotConfig::MergeFrom(
          from._internal_config());
      break;
    }
    case kSpot: {
      _this->_internal_mutable_spot()->::Spot::MergeFrom(
          from._internal_spot());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.destination_, other->_impl_.destination_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wrapper_2eproto_getter, &descriptor_table_wrapper_2eproto_once,
      file_level_metadata_wrapper_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Message*
Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
